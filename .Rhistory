?waldTest
Lee_data=read.csv("C:\\Users\\azaremba.CS\\Dropbox\\PhD\\Lee\\Lee_data\\Lee_data.csv")
Lee_data=read.csv("C:\\Users\\anna\\Dropbox\\PhD\\Lee\\Lee_data\\Lee_data.csv")
Lee_dates=as.Date(Lee_data[,1], origin="1899-12-30")
colIds(Lee_data)
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
colIds(Lee_data)
par(mfrow=c(2,2))
plot(Lee_data[,2], type = "l")
plot(Lee_data[,3], type = "l")
plot(Lee_data[,4], type = "l")
plot(Lee_data[,5], type = "l")
Lee_series = asSeriesData(Lee_data)
irate.real = Lee_data[Lee_dates > ("1960/12/31"),"RF.REAL"]
x11()
par(mfrow=c(2,2))
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
plot(acf(irate.real, plot=F))
plot(irate.real, main="Monthly Real Interest Rate")
tmp = acf(irate.real, type="partial")
y = rnorm(100,sd=1)
y.bar = mean(y)
g.hat = acf(y,lag.max=10,type="covariance",plot=F)
r.hat = acf(y,lag.max=10,type="correlation",plot=F)
par(mfrow=c(1,2))
ts.plot(y,ylab="y")
plot(r.hat)
colIds(Lee_data)
smpl2 = Lee_data[(Lee_dates > ("1947/1/1") & Lee_dates < ("1988/1/1")),"RF.REAL"]
x11()
Lee_RF.acf = acf(smpl2)
Lee_data.postwar = Lee_data[(Lee_dates > ("1947/1/1") & Lee_dates < ("1988/1/1")),]
Lee_ts = Lee_data.postwar[,2:5]
Lee_dates_num = Lee_data.postwar[,1]
Lee_dates_str = as.Date(Lee_dates_num, origin="1899-12-30")
x11()
Lee_ts.acf = acf(Lee_ts)
varAIC.fit = VAR(Lee_ts, p = 2, ic = "AIC")
summary(varAIC.fit)
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
varAIC.fit = VAR(Lee_ts, p = 2, ic = "AIC")
summary(varAIC.fit)
VARselect(Lee_ts, lag.max = 8, type = "both")
varAIC4.fit = VAR(Lee_ts, p = 4, ic = "AIC")
summary(varAIC.fit)
bigR = matrix(0,2,36)
bigR[1,29]=bigR[2,33]=1
vecPi = unlist(coef(varAIC.fit))
avar = bigR%*%vcov(varAIC.fit)%*%t(bigR)
wald = t(bigR%*%vecPi)%*%solve(avar)%*%(bigR%*%vecPi)
dim(vcov(varAIC.fit))
dim(bigR)
dim(solve(avar))
dim(t(bigR%*%vecPi))
dim(vecPi)
length(vecPi)
length(bigR)
dim(bigR)
coef(varAIC.fit)
9*4
unlist(coef(varAIC.fit))
ans
vecPi (:)
as.vector(vecPi)
dim(vecPi )
coef(varAIC.fit
)
9*4*4
varAIC.fit
?coef
dim(coef(varAIC.fit))
length(coef(varAIC.fit))
coef(varAIC.fit)
coef(varAIC.fit)[1,:]
a=coef(varAIC.fit)
a(1)
a[1]
b=unlist(a)
b[1]
b[10]
b[1,1]
b[1]
b[5]
b
coef(varAIC.fit)
[1:4:144]
1:4:144
x = c(2,7,5)
x
y = seq(from=4, length=3, by=3)
?seq
y
x+y
x/y
x^y
x
x[2]
x[2:3]
x[-2]
x
x[-c(1,2)]
z=matrix(seq(1,12)4,3)
z=matrix(seq(1,12),4,3)
seq(1,12)
z[3:4,2:3]
z=[,1]
z[,1]
z[,1,drop=false]
z[,1,drop=FALSE]
ls()
z
z[,1]
z[,1,drop=FALSE]
x = runif(50)
x
y=rnorm
y
y=rnorm(50)
y
plot(x,y)
plot(x,y,xlab="Random Uniform", ylab="Random normal", pch="*", col="blue")
par(mfrow=c(2,1))
plot(x,y)
hist(y)
par(mfrow=c(1,1))
Auto=read.csv("Auto.csv")
Auto=read.csv("C:/Users/anna/PhD/phd/other/learrning_R_n_stat/Auto.csv")
names(Auto)
dim(Auto)
class(Auto)
summary(Auto)
plot(Auto$cylinders,Auto$mpg)
Auto$mpg
attach(Auto)
search()
plot(cylinders,mpg)
cylinders=as.factors(cylinders)
cylinders=as.factor(cylinders)
(cylinders)
plot(cylinders,mpg)
search()
a <- available.packages()
a
head(rownames(a), 3)
install.packages("slidify")
install_github('slidify')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
?install_github
install.packages("devtools")
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("Rtools")
install.packages("Rtools")
install.packages("slidify")
install.packages("Rtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install.packages("Rtools")
find.packages("devtools")
find.package("devtools")
library(devtools)
find_rtools()
find.package("Rtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
find_rtools()
find.package("devtools")
install.packages("devtools")
find.package("Rtools")
install.packages("Rtools")
find_rtools()
install.packages("Rtools")
library(devtools)
install.packages("Rtools")
install.packages("devtools")
install.packages("Rtools")
library(devtools)
find_rtools()
install.packages("devtools")
install.packages("Rtools")
library(devtools)
find_rtools()
install.packages("Rtools")
install.packages("Rtools")
install.packages("devtools")
install.packages("Rtools")
find_rtools()
library(devtools)
install.packages("devtools")
install.packages("Rtools")
library(devtools)
find_rtools()
install.packages("Rtools")
?find_rtools()
find_rtools(debug=TRUE)
install.packages("Rtools")
.libPaths()
find_rtools()
install.packages("Rtools")
install.packages("Rtools","C:\Users\anna\Learning_other\DataScience\R_resources")
install.packages("Rtools","C:/Users/anna/Learning_other/DataScience/R_resources")
library(rtools)
library(Rtools)
find_rtools(debug=TRUE)
findpackage("devtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
find_rtools(debug=TRUE)
install.packages("Rtools","C:/Users/anna/Learning_other/DataScience/R_resources")
install.package("KernSmooth")
install.packages("KernSmooth")
load(KernSmooth)
load.package(KernSmooth)
load.packages(KernSmooth)
library(KernSmooth)
getwd()
setwd("C:/Users/anna/Learning_other/DataScience/learrning_R_n_stat")
dir
dir()
myfunction <- function() {
x <- rnorm(100)
mean (x)
}
myfunction <- function() {
x <- rnorm(100)
mean (x)
}
source("get_variables.R")
ls
ls()
myfunction()
library(datasets)
data(airquality)
cor(airquality)
x<-1
x
print(x)
msg<-"hello"
print(msg)
x<-1:20
x
x[1]
x[1:5]
v<-vector()
help(append)
append(1:5, 0:1, after = 3)
1  # is numeric
1L # is an integer!
type(1L)
append(v,1)
append(v,1)
print(v)
v
v=append(v,1)
v
v=append(v,1)
v
attributes(v)
x
x<-c(0.5,0.6)
x
x<-c(T,F) # T,F shortcuts for logic!
x
x <- c(0.5,0.6)
x
x <- c("a", "b", "c")
x
x <- 9:19
x
x <- c(1+0i, 2+4i)
x
x <- vector("numeric", length = 10)
x
y <- c(1.7, "a")
type(y)
y
y <- c(TRUE, 2)
y
typeof(y)
y <- c(1.7, "a")
typeof(y)
x<- 0:6
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
x = c("a", "b", "c")
as.numeric(x)
x = c("a", "b", "c")
x
x <- list(1, "a", TRUE, 1+4i)
x
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
attributes(m)
m <- matrix(1:6, nrow = 2, ncol = 3)
m
m
m <- 1:10
m
dim(m) <- c(2,5)
m
x<-1:3
cbind(x,y)
x
y
y <- 10:12
cbind(x,y)
rbind(x,y)
