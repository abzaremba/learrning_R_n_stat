Lee_dates=as.Date(Lee_data[,1], origin="1899-12-30")
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
colIds(Lee_data)
par(mfrow=c(2,2))
plot(Lee_data[,2], type = "l")
plot(Lee_data[,3], type = "l")
plot(Lee_data[,4], type = "l")
plot(Lee_data[,5], type = "l")
Lee_series = asSeriesData(Lee_data)
irate.real = Lee_data[Lee_dates > ("1960/12/31"),"RF.REAL"]
x11()
par(mfrow=c(2,2))
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
plot(acf(irate.real, plot=F))
plot(irate.real, main="Monthly Real Interest Rate")
tmp = acf(irate.real, type="partial")
y = rnorm(100,sd=1)
y.bar = mean(y)
g.hat = acf(y,lag.max=10,type="covariance",plot=F)
r.hat = acf(y,lag.max=10,type="correlation",plot=F)
par(mfrow=c(1,2))
ts.plot(y,ylab="y")
plot(r.hat)
colIds(Lee_data)
smpl2 = Lee_data[(Lee_dates > ("1947/1/1") & Lee_dates < ("1988/1/1")),"RF.REAL"]
x11()
Lee_RF.acf = acf(smpl2)
Lee_data.postwar = Lee_data[(Lee_dates > ("1947/1/1") & Lee_dates < ("1988/1/1")),]
Lee_ts = Lee_data.postwar[,2:5]
Lee_dates_num = Lee_data.postwar[,1]
Lee_dates_str = as.Date(Lee_dates_num, origin="1899-12-30")
x11()
Lee_ts.acf = acf(Lee_ts)
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
varAIC.fit = VAR(Lee_ts, p = 2, ic = "AIC")
summary(varAIC.fit)
VARselect(Lee_ts, lag.max = 8, type = "both")
varAIC4.fit = VAR(Lee_ts, p = 4, ic = "AIC")
summary(varAIC.fit)
bigR = matrix(0,2,36)
bigR[1,29]=bigR[2,33]=1
vecPi = as.vector(coef(varAIC.fit))
avar = bigR%*%vcov(varAIC.fit)%*%t(bigR)
wald = t(bigR%*%vecPi)%*%solve(avar)%*%(bigR%*%vecPi)
as.numeric(wald)
bigR
size(bigR)
dim(bigR)
varAIC.fit
dim(varAIC.fit)
vecPi
dim(vecPi )
varAIC.fit
coef(varAIC.fit)
vecPi = as.vector(coef(varAIC.fit))
avar = bigR%*%vcov(varAIC.fit)%*%t(bigR)
avar
typeof(vecPi)
typeof(vecPi)
? unlist
vecPi = unlist(coef(varAIC.fit))
vecPi
dim(vecPi)
length(vecPi)
typeof(vecPi)
wald = t(bigR%*%vecPi)%*%solve(avar)%*%(bigR%*%vecPi)
length(vecPi)
length(bigR)
matrix(0,2,36)
dim(vcov(varAIC.fit))
dim(vecPi )
length(vecPi )
varAIC
summary(varAIC.fit)
varAIC.fit
dim(Lee_ts)
dim(vcov(varAIC.fit))
solve(avar)
?solve
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
find_rtools()
find_rtools()
library(devtools)
find_rtools()
find_rtools(T)
x<- c("a", "b", "c", "a")
x[1]
x[2]
x[1:4]
x[x>"a"]
u <- x > "a"
u
x[u]
x<- list(foo = 1:4, bar = 0.6)
x[1]
x[[1]]
x$bar
x["bar"]
x[["bar"]]
x<- list(foo = 1:4, bar = 0.6, baz = "hello")
x[c(1,3)]
name <- "foo"
x[name]
x[[name]]
x$name
x$foo
x<- list(a=list(10,12,14),b = c(3.14,2.81))
x[[c(1,4)]]
x[[c(1,2)]]
x[[c(1,3)]]
x[[1]]
x[[1,2]]
x[[1,c]]
x<-matrix(1:6,2,3)
x[1,2]
x[2,1]
x[1,]
x[1,2,drop=FALSE]
x[1,]
x[1, , drop=FALSE]
x<- list(aardvark = 1:5)
x$a
x[["a"]]
x[["a", exact = FALSE]]
x<-c(1,2,NA,4,NA,5)
bad<-is.na(x)
x[!bad]
y<- c("a", "b", NA, "d". Na, "f")
good <-complete.cases(x,y)
good
x[good]
y<- c("a", "b", NA, "d", Na, "f")
x<-c(1,2,NA,4,NA,5)
bad<-is.na(x)
x[!bad]
y<- c("a", "b", NA, "d", NA, "f")
good <-complete.cases(x,y)
good
x[good]
y[good]
airquality[1:6,]
good <- complete.cases(airquality)
airquality[good, ][1:6, ]
x<- 1:4; y<-6:9
x+y
x>2
x>=2
y==8
x*y
x/y
x<- matrix(1:4, 2,2)
y<-matrix(rep(10,4),2,2)
x*y
x/y
x%*%y
if(x>2){2}
if(x>2){z<-2}
if(2>2){z<-2}
z
if(2>=2){z<-2}
z
else {z<-3}
if(2>=2){z<-2} else {z<-3}
z
if(2>2){z<-2} else {z<-3}
z
print(i)
x<-c("a", "b", "c", "d")
{print(x[i])}
x<-c("a", "b", "c", "d")
for(i in 1:4) {print(x[i])}
}
for(i in 1:4) {
print(x[i])
}
for(i in 1:10){
print(i)
}
eq_along(x)){
print(x[i])
}
for (i in seq_along(x)){
print(x[i])
}
for (letter in x) {print(letter)}
for (letter in x) print(letter)
x<-matrix(1:6,2,3)
x<-matrix(1:6,2,3)
for(i in seq_len(nrow(x))){
for (j in seq_len(ncol(x))){
print(x[i,j])
}
}
while (count<10) {
print(count)
count <- count+1
}
count<-0
while (count<10) {
print(count)
count <- count+1
}
z<-5
while(z>=3 && z<=10){
print(z)
coint <- rbincom(1,1,0.5)
if(coin == 1) { ## random walk
z <- z+1
} else {
z <- z-1
}
}
while(z>=3 && z<=10){
print(z)
coint <- rbinom(1,1,0.5)
if(coin == 1) { ## random walk
z <- z+1
} else {
z <- z-1
}
}
while(z>=3 && z<=10){
print(z)
coin <- rbinom(1,1,0.5)
if(coin == 1) { ## random walk
z <- z+1
} else {
z <- z-1
}
}
x0 <- 1
tol <- 1e-8
x0 <- 1
tol <- 1e-8
repeat{
x1 <- computeEstimate()
if(abs(x1-x0) < tol) {
break
} else {
x0 <- x1
}
}
for (i in 1:100){
if(i<=20){
## skip first 20
next
}
## do nothing here, hehe
}
add2(3,8)
add2 <- function(x,y){
x+y
}
add2(3,8)
above10 <- function(x){
use <- x>10
x[use]
}
above10(11)
above10(1:12)
above <- function(x,n){
use <- x>n
x[use]
}
above(1:10,5)
above <- function(x,n=10){
add2 <- function(x,y){
x+y
}
above10 <- function(x){
use <- x>10
x[use]
}
above <- function(x,n=10){
use <- x>n
x[use]
}
f\
above <- function(x,n=10){
use <- x>n
x[use]
}
above(1:5)
above(1:5,2)
columnmean <- function(y){
nc < ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(1)
columnmean(matrix(1:6,2,3))
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(matrix(1:6,2,3))
columnmean(1)
columnmean(matrix(1:6,2,3))
means[i] <- mean(y[,i], na.rm=removeNA)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm=removeNA)
}
means
}
formals(columnmean)
formals(columnmean)mydata <- rnorm(100)
mydata <- rnorm(100)
sd(mydata)
mydata
sd(x=mydata)
sd(x=mydata, na.rm=FALSE)
args(lm)
lm(data=mydata,y~x, model=FALSE, 1:100)
lm(y~x, mydata,1:100, model=FALSE)
lm(y~x, mydata,1:100)
y
x
rm(x)
lm(y~x, mydata,1:100)
y
rm(y)
lm(y~x, mydata,1:100)
help(lm)
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
group
gl(2,4,5)
gl(1,4,5)
gl(1,1,5)
lm.D9 <- lm(weight ~ group)
summary(lm.D9)
aaa <- lm(weight ~ group, mydata)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
getwd()
setwd("C:/Users/Ania/Learning/learrning_R_n_stat")
read.table("C:/Users/Ania/Learning/learrning_R_n_stat/rprog_data_specdata/specdata/001.csv", header = TRUE, sep=",")
read.table("~/rprog_data_specdata/specdata/001.csv", header = TRUE, sep=",")
getwd()
p = getwd()
p
p[1]
p[[1]
]
directory = "rprog_data_specdata/specdata"
p0 = getwd()
p1 = paste(p0,"/",directory,"/", sep = "")
p1
nchar("01")
as.char(10)
id = 1:332
i = 1
number = id[i]
number
number = paste("0",number, sep = "")
number
p0 = getwd()
p1 = paste(p0,"/",directory,"/", sep = "")
number = id[i]
while(nchar(number)<3){number = paste("0",number, sep = "")}
pathname = paste(p1,"/",[i],".csv", sep = "")
thname = paste(p1,"/",number,".csv", sep = "")
thname
athname = paste(p1,number,".csv", sep = "")
athname
pollutantmean <- function(directory, pollutant, id = 1:332) {
d
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
p0 = getwd()
p1 = paste(p0,"/",directory,"/", sep = "")
big_table = []
for (i in id){
number = id[i]
while(nchar(number)<3){number = paste("0",number, sep = "")}
pathname = paste(p1,number,".csv", sep = "")
table = read.table(pathname, header = TRUE, sep=",")
bad<-is.na(table[pollutant])
temp_table = table[pollutant][!bad]
big_table  = c(big_table, temp_table)
}
mean(big_table)
}
pathname
table = read.table(pathname, header = TRUE, sep=",")
bad<-is.na(table[pollutant])
table
pollutant = "nitrate"
bad<-is.na(table[pollutant])
bad
temp_table = table[pollutant][!bad]
temp_table
big_table = []
big_table = Null
class(temp_table)
{}
big_table = NULL
big_table
big_table  = c(big_table, temp_table)
big_table
mean(big_table)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
p0 = getwd()
p1 = paste(p0,"/",directory,"/", sep = "")
big_table = NULL
for (i in id){
number = id[i]
while(nchar(number)<3){number = paste("0",number, sep = "")}
pathname = paste(p1,number,".csv", sep = "")
table = read.table(pathname, header = TRUE, sep=",")
bad<-is.na(table[pollutant])
temp_table = table[pollutant][!bad]
big_table  = c(big_table, temp_table)
}
mean(big_table)
}
pollutantmean("rprog_data_specdata/specdata", "nitrate",1)
pollutantmean("rprog_data_specdata/specdata", "nitrate",1:10)
pollutantmean("rprog_data_specdata/specdata", "nitrate",1:332)
pollutantmean("rprog_data_specdata/specdata", "nitrate",23)
pollutantmean("rprog_data_specdata/specdata", "nitrate",1:332)
pollutantmean("rprog_data_specdata/specdata", "nitrate",70:72)
pollutantmean("rprog_data_specdata/specdata", "nitrate",7)
pollutantmean("rprog_data_specdata/specdata", "nitrate",1)
pollutantmean("rprog_data_specdata/specdata", "nitrate",2)
pollutantmean("rprog_data_specdata/specdata", "nitrate")
pollutantmean("rprog_data_specdata/specdata", "nitrate",1)
pollutantmean("rprog_data_specdata/specdata", "nitrate",2)
id=2
for (i in id){
number = id[i]
print(number)
}
class(id)
id
seq_len(id)
id=2:10
id
for (i in id){
+     number = id[i]
+ print(number)
+ }
for (i in id){
number = id[i]
print(number)
}
for (i in id){
number = id[i]
print(i)
print(number)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
p0 = getwd()
p1 = paste(p0,"/",directory,"/", sep = "")
big_table = NULL
for (i in id){
number = i
while(nchar(number)<3){number = paste("0",number, sep = "")}
pathname = paste(p1,number,".csv", sep = "")
table = read.table(pathname, header = TRUE, sep=",")
bad<-is.na(table[pollutant])
temp_table = table[pollutant][!bad]
big_table  = c(big_table, temp_table)
}
mean(big_table)
}
pollutantmean("rprog_data_specdata/specdata", "nitrate",1)
pollutantmean("rprog_data_specdata/specdata", "nitrate",2)
pollutantmean("rprog_data_specdata/specdata", "nitrate",70:72)
pollutantmean("rprog_data_specdata/specdata", "nitrate",23)
pollutantmean("rprog_data_specdata/specdata", "sulfate",23)
pollutantmean("rprog_data_specdata/specdata", "sulfate",1:10)
